#!/usr/bin/env bash

# Update the ~/.ssh/known_hosts file to overwrite / merge the keys of the hosts

readonly SCRIPT_NAME="$(basename $0)"
readonly SCRIPT_DIR=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

source "${SCRIPT_DIR}/shcommons/essentials.sh"
source "${SCRIPT_DIR}/shcommons/extras.sh"
source "${SCRIPT_DIR}/shcommons/log.sh"

usage()
{
    pusage "$SCRIPT_NAME [-o|--overwrite] [-m|--merge] [-H|--hash] [-f|--file <known hosts file>] [-s|--source <host map file>] [<host>...]"
    pinfol 'Running this script require the openssh client to support ProxyJump(version is at least 7.3)'
    exit
}

remove_host()
{
    if $(ssh-keygen -F "${1}" -f "$temp_known_hosts_file" &> /dev/null); then
        ssh-keygen -q -R "${1}" -f "$temp_known_hosts_file" &> /dev/null
    fi
    if is_nonempty "${2}" && $(ssh-keygen -F "${1}:${2}" -f "$temp_known_hosts_file" &> /dev/null); then
        ssh-keygen -q -R "${1}:${2}" -f "$temp_known_hosts_file" &> /dev/null
    fi
    if is_nonempty "${2}" && $(ssh-keygen -F "[${1}]:${2}" -f "$temp_known_hosts_file" &> /dev/null); then
        ssh-keygen -q -R "[${1}]:${2}" -f "$temp_known_hosts_file" &> /dev/null
    fi
}

keyscan_host()
{
    a=$(extract_parts_from_userdomain "${1}")
    eval "declare -A target=${a#*=}"
    if [ "${#target[@]}" = 0 ] || is_empty "${target['hostname']}"; then
        die "$ENO_ERROR" "${SCRIPT_NAME}:" "hostname not found in the '${1}'"
    fi
    [ "$action" = 'merge' ] && remove_host "${target['hostname']}" "${target['port']}"
    remote_command="ssh-keyscan${is_hash:+ -H}${target['port']:+ -p ${target['port']}} ${target['hostname']}"
    ssh_command=''
    if [ "${#jump_hosts[@]}" \> 0 ]; then
        ssh_command+=' -J '
        ssh_command+=$(join_by , "${jump_hosts[@]}")
        ssh_command+=' '
    fi
    if is_nonempty "$destination_host"; then
        a=$(extract_parts_from_userdomain "$destination_host")
        eval "declare -A destination=${a#*=}"
        ssh_command+="${destination['port']:+ -p ${destination['port']} }"
        ssh_command+="${destination['username']:+ ${destination['username']}@}"
        ssh_command+="${destination['hostname']}"
        ssh_command="ssh -Tq $ssh_command"
    fi
    eval "${ssh_command:+$ssh_command }'$remote_command' 1>> $temp_known_hosts_file 2> /dev/null"
    [ "${?}" != 0 ] && perrorl "Running \"${ssh_command:+$ssh_command }'$remote_command'\" failed"
    ips=$(resolve_hostname_to_ip "${target['hostname']}")
    for ip in $ips; do
        [ "$ip" = "${target['hostname']}" ] && continue
        [ "$action" = 'merge' ] && remove_host "$ip" "${target['port']}"
        remote_command="ssh-keyscan${is_hash:+ -H}${target['port']:+ -p ${target['port']}} $ip"
        eval "${ssh_command:+$ssh_command }'$remote_command' 1>> $temp_known_hosts_file 2> /dev/null"
        [ "${?}" != 0 ] && perrorl "Running \"${ssh_command:+$ssh_command }'$remote_command'\" failed"
    done
}

main()
{
    opts="$(getopt -o omHf:s:h --long overwrite,merge,hash,file:,source:,help -n $SCRIPT_NAME -- ${@})"
    if [ "${?}" != 0 ]; then
        perrorl "${SCRIPT_NAME}:" 'Failed to parsing options'
        usage
    fi
    eval set -- "$opts"
    while true; do
        case "${1}" in
        -o | --overwrite ) action=overwrite; shift ;;
        -m | --merge ) action=merge; shift ;;
        -H | --hash ) is_hash=true; shift ;;
        -f | --file ) known_hosts_file="${2}"; shift 2 ;;
        -s | --source ) map_file="${2}"; shift 2 ;;
        -h | --help ) usage ;;
        -- ) shift; break ;;
        * ) die "$ENO_ERROR" "${SCRIPT_NAME}:" 'Internal error' ;;
        esac
    done
    if [ "${#}" = 0 ] && is_empty "$map_file" && [ "${#SSH_HOST_MAP[@]}" = 0 ]; then
        usage
    fi
    action="${action:-merge}"   # Use merge by default
    known_hosts_file=${known_hosts_file:-~/.ssh/known_hosts}
    today=$(date +'%Y-%m-%d')
    temp_known_hosts_file="${known_hosts_file}.tmp.$today"
    [ "$action" = 'merge' ] && cp -f "$known_hosts_file" "$temp_known_hosts_file" &> /dev/null
    backup_known_hosts_file="${known_hosts_file}.bak.$today"
    while [ "${#}" -gt 0 ]; do
        keyscan_host "${1}"
        shift
    done
    if is_nonempty "$map_file"; then
        if ! . "$map_file"; then
            die "$ENO_ERROR" "${SCRIPT_NAME}:" "Failed to source $map_file"
        fi
    fi
    jump_hosts=()
    for i in "${SSH_HOST_MAP[@]}"; do
        eval "declare -a host_list=${i#*=}"
        for j in "${host_list[@]}"; do
            keyscan_host "$j"
        done
        jump_hosts+=( $destination_host )
        destination_host="${host_list[0]}"
    done
    mv "$known_hosts_file" "$backup_known_hosts_file" &> /dev/null
    sort -u "$temp_known_hosts_file" > "$known_hosts_file" 2> /dev/null
    rm -f "$temp_known_hosts_file" "${temp_known_hosts_file}.old" &> /dev/null
}

main "${@}"
